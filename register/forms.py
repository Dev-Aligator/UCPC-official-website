from django import forms
from django.forms import inlineformset_factory
from .models import Team, Teammate
from .validator import Validator
from .choices import Choices
from django.contrib.auth.forms import UserCreationForm
from django.contrib.auth.models import User
from django.contrib.auth import get_user_model

class userForm(UserCreationForm):
    email = forms.EmailField(label= 'Email', widget = forms.TextInput(attrs={'class': 'form-element form-box-control','placeholder': '‚úâÔ∏è |  Email Address' }))
    password1 = forms.CharField(max_length = 20, label = 'M·∫≠t kh·∫©u', validators=[Validator.PwdRegex], widget = forms.PasswordInput(attrs={'class': 'form-element', 'id': 'pos5', 'placeholder': 'üîí | Password'}))
    password2 = forms.CharField(max_length = 20, label = 'X√°c nh·∫≠n m·∫≠t kh·∫©u', widget = forms.PasswordInput(attrs={'class': 'form-element', 'id': 'pos6', 'placeholder': 'üîí | Re-enter password'}))
    class Meta:
        model = get_user_model()
        fields = ['email']


class TeamForm(forms.ModelForm):
    TeamName = forms.CharField(required=True, max_length = 30, label = 'T√™n ƒë·ªôi', validators=[Validator.TeamRegex], widget = forms.TextInput(attrs={'class': 'form-box-control', 'id': 'pos1', 'placeholder': 'Ch·ªØ c√°i ƒë·∫ßu ti√™n trong t√™n ƒë·ªôi ph·∫£i vi·∫øt hoa. V√≠ d·ª•: Team01' }))
    class Meta:
        model = Team
        fields = ['TeamName']

    def __init__(self, *args, **kwargs):
        super(TeamForm, self).__init__(*args, **kwargs) 

        # add custom error messages
        self.fields['TeamName'].error_messages.update({
            'invalid': '‚ö†Ô∏è T√™n ƒë·ªôi kh√¥ng h·ª£p l·ªá! (T√™n ƒë·ªôi h·ª£p l·ªá c√≥ ƒë·ªô d√†i t·ªëi ƒëa 30 k√Ω t·ª± v·ªõi duy nh·∫•t ch·ªØ c√°i in hoa ·ªü ƒë·∫ßu)',
        })

class TeammateForm(forms.ModelForm):
    Fullname = forms.CharField(required=True, max_length=30, label='H·ªç v√† t√™n', validators=[Validator.NameRegex], widget = forms.TextInput(attrs={'class': 'form-box-control', 'placeholder': 'V√≠ d·ª•: Nguy·ªÖn VƒÉn A', 'name': 'Fullname' }))
    MSSV_CMND = forms.CharField(required=True, max_length=30, label = 'MSSV/CMND', validators=[Validator.MSSVRegex], widget = forms.TextInput(attrs={'class': 'form-box-control', 'placeholder': 'MSSV c√≥ 8 ch·ªØ s·ªë ho·∫∑c CMND/CCCD c√≥ 9/12 ch·ªØ s·ªë. V√≠ d·ª•: 381932123'}))
    Phone = forms.CharField(required=True, max_length=11, label = 'S·ªë ƒëi·ªán tho·∫°i', validators=[Validator.PhoneRegex], widget = forms.TextInput(attrs={'class': 'form-box-control', 'id': 'pos2', 'placeholder': 'S·ªë ƒëi·ªán tho·∫°i c√≥ 10 ho·∫∑c 11 ch·ªØ s·ªë. V√≠ d·ª•: 0912345678'}))
    School = forms.ChoiceField(required=True, label='T√™n tr∆∞·ªùng', choices=Choices.SCHOOL_CHOICES, widget=forms.Select(attrs={'class': 'form-box-control', 'list': 'schools', 'placeholder': 'V√≠ d·ª•: ƒê·∫°i h·ªçc C√¥ng ngh·ªá Th√¥ng tin - ƒêHQG TP.HCM'}))
    
    def __init__(self, *args, **kwargs):
        super(TeammateForm, self).__init__(*args, **kwargs)
        self.fields['Fullname'].error_messages.update({
            'invalid': '‚ö†Ô∏è T√™n kh√¥ng h·ª£p l·ªá!',
        })
        self.fields['MSSV_CMND'].error_messages.update({
            'invalid': '‚ö†Ô∏è M√£ s·ªë sinh vi√™n / Ch·ª©ng minh nh√¢n d√¢n kh√¥ng h·ª£p l·ªá! (MSSV h·ª£p l·ªá c√≥ 8 ch·ªØ s·ªë / CMND h·ª£p l·ªá c√≥ 9 ho·∫∑c 12 ch·ªØ s·ªë)',
        })
        self.fields['Phone'].error_messages.update({
            'invalid': '‚ö†Ô∏è S·ªë ƒëi·ªán tho·∫°i kh√¥ng h·ª£p l·ªá! (S·ªë ƒëi·ªán tho·∫°i h·ª£p l·ªá c√≥ 10 ho·∫∑c 11 ch·ªØ s·ªë)',
        }) 
        
    class Meta:
        model = Teammate
        fields = ['Fullname', 'MSSV_CMND', 'Phone', 'School']
    
HighSchoolFormSet = inlineformset_factory(
    parent_model=Team, 
    model=Teammate, 
    form=TeammateForm,
    extra=4
)

UniversityFormSet = inlineformset_factory (
    parent_model=Team,
    model=Teammate,
    form=TeammateForm,
    extra=3
)



class LoginForm(forms.Form):
    Email = forms.EmailField(required=True, label= 'Email', widget = forms.EmailInput(attrs={'class': 'form-control','placeholder': 'V√≠ d·ª•: abcd@efgh.com' }))
    Password = forms.CharField(required=True, max_length = 20, label = 'M·∫≠t kh·∫©u', validators=[Validator.PwdRegex], widget = forms.PasswordInput(attrs={'class': 'form-control'}))
